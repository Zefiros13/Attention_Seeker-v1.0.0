@using Microsoft.AspNet.Identity;

@model Attention_Seeker.ViewModels.UserConnectionViewModel
@{
    ViewBag.Title = "ReadOnlyProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

    @*<div>*@
        <div style="width:50%; height:100%; padding: 20px; display:inline-block; vertical-align:top;">
            @if(Model.User.ProfilePicturePath == null)
            {
                <img src="~/Media/Images/logo.png" style="width:100px; height:100px; margin-bottom:50px;  object-fit: contain;  border-radius: 100%; border:solid 2px #B58900;"/>
            }
            else
            {
                <img src="@Model.User.ProfilePicturePath" style="width:100px; height:100px; margin-bottom:50px;  object-fit: cover; border-radius: 100%;"/>
            }
            <div style="display:inline-block; padding: 20px;">
                <h1>@Model.User.UserName</h1>
                <p><b>@Model.User.Name</b></p>
                <p>@Model.User.Bio</p>
            </div>
            <br />

            @using (Html.BeginForm("ReadOnlyProfile", "Users", "Profile/{id}", FormMethod.Post))
            {
                if (Model.Connection.WaitingFlag == false && Model.Connection.ApproveFlag == true)
                {
                    <div id="cancelDiv" style="display:block;">
                        <label>Currently connected with @Model.User.UserName</label>
                        <button type="submit" name="buttonClick" value="cancelConnection" class="btn btn-primary">Disconnect?</button>
                    </div>
                }

                if (Model.Connection.WaitingFlag == false && Model.Connection.ApproveFlag == false)
                {
                    <div id="askDiv" style="display:block;">
                        <button type="submit" name="buttonClick" value="sendRequest" class="btn btn-primary">Connect with @Model.User.UserName</button>
                    </div>
                }

                if (Model.Connection.WaitingFlag == true && Model.Connection.ApproveFlag == false)
                {
                    if (Model.Connection.ConnectionSender != null)
                    {
                        <div style="margin: 5px; width:200px; height: 70px; background-color: #073642; border: 1px solid #B58900; border-radius:5px; text-align:center; padding:15px; margin-right:15px;">
                            <label>@Model.Connection.ConnectionSender.UserName asking for connection?</label> <br />
                            @Html.ActionLink("Approve", "Approve", new { Id = Model.Connection.Id }, new { @class = "btn btn-primary" })
                            @Html.ActionLink("Reject", "Reject", new { id = Model.Connection.Id }, new { @class = "btn btn-primary" })
                        </div>
                    }
                    else
                    {
                        <div id="connectionWaitingDiv" style="display:block;">
                            <label>Connection is sent to @Model.User.UserName, waiting for response.</label>
                            <button type="submit" name="buttonClick" value="cancelRequest" class="btn btn-primary">Cancel?</button>
                        </div>
                    }
                }
            }

            @if (Model.User.Id == System.Web.HttpContext.Current.User.Identity.GetUserId())
            {
                <div style="color: #B58900;">
                    This is your profile.
                </div>

                <script src="~/Scripts/jquery-3.3.1.min.js"></script>
                <script>
                    $("#cancelDiv").hide();
                    $("#askDiv").hide();
                    $("#connectionWaitingDiv").hide();
                    $("#audioDiv").hide();
                </script>
            }


        </div>

        @if (Model.Connection.WaitingFlag == false && Model.Connection.ApproveFlag == true)
        {
            <div style="width:10%; display:inline-block;"></div>



            <div style="border: solid 1px #B58900; border-radius:10px; display:inline-block; width:35%; height:450px; padding: 20px;">

                <div style="max-height: 300px;">
                <ul id="messages" style="list-style-type:none; margin-left: -40px; max-height: 300px; overflow-y:auto;">

                    @if(Model.Connection.Messages != null)
                    {
                        foreach (var message in Model.Connection.Messages)
                        {
                            if(message.MessageSender != null)
                            {
                                <li style=" padding:3px; margin: 2px;"><strong>@message.MessageSender.UserName : </strong> @message.MessageContent.ToString() </li>
                            }
                            else
                            {
                                <li style="padding:3px; margin: 2px;"><strong><span style="color:#B58900;">You: </span></strong> @message.MessageContent.ToString() </li>
                            }
                        }
                    }
                </ul>
                </div> <br />

                @using (Html.BeginForm("SendMessage", "Users", FormMethod.Post))
                {
                    <div class="form-group">
                        <input type="text" id="message" name="message" class="form-control" placeholder="Write message..." /> <br />
                    </div>
                    <button type="submit" id="sendMessage" class="btn btn-primary">Send</button>
                }
                
                

                <script src="~/Scripts/jquery-3.3.1.min.js"></script>
                <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
                <script type="text/javascript" src="~/signalR/hubs"></script>
                <script>
                    const messages = document.getElementById("messages");

                    function scrollToBottom() {
                        messages.scrollTop = messages.scrollHeight;
                    }

                    function appendMessage() {
                        const message = document.getElementsByClassName('message')[0];
                        const newMessage = message.cloneNode(true);
                        messages.appendChild(newMessage);
                    }

                    function getMessages() {
                        shouldScroll = messages.scrollTop + messages.clientHeight === messages.scrollHeight;
                        appendMessage();
                        if (!shouldScroll) {
                            scrollToBottom();
                        }
                    }
                    scrollToBottom();

                    setInterval(getMessages, 100);
                </script>

            </div>
         }
        @Html.HiddenFor(m => m.Connection.Id)
